---
layout: default
title: Jenkins Configuration as Code
css:
  - '/assets/bower/bootstrap/css/bootstrap.min.css'
  - '/css/blueocean-animate.css'
  - '/css/blueocean-style.css'
opengraph:
  image: 'projects/jcasc/img/jenkinsascodeblog.jpg'
---

%header#header.header
  .skew
    .container.wow.fadeIn{"data-wow-delay" => "0.5s"}
      .row
        .header-inner.col-lg-12
          .logo
            = partial('logo.html.haml')
          %h1.intro-title
            %span> Jenkins Configuration as Code
            Getting Started
          %a.btn.btn-primary{:href => expand_link('projects/jcasc/roadmap')}
            Roadmap
          %a.btn.btn-secondary{:href => expand_link('projects/jcasc/getting-started')}
            Get started

%section.features
  .container
    .row
      .col-xl-10.push-xl-1
        .featuresblurb.col-md-10.push-md-1.col-lg-8.push-lg-2
          %h2 Configure your Jenkins as Code
          %p The ‘as code’ paradigm is about being able to reproduce and/or restore a full environment within minutes based on recipes and automation, managed as code.
          %br/
    .row
      .col-xl-10.push-xl-1
        %p Experienced Jenkins users rely on groovy init scripts to customize jenkins and enforce desired state. Those scripts directly invoke Jenkins API and as such can do everything (at your own risk). But they also require you know Jenkins internals, and are confident in writing groovy scripts on top of Jenkins API.
        %br/
        %p Configuration-as-Code plugin has been designed as an opinionated way to configure jenkins based on human-readable declarative configuration files. Writing such a file should be feasible without being a Jenkins expert, just translating into code a configuration process one is used to executing in the web UI.

%script{:src => expand_link('js/wow.js'), :type => "text/javascript"}
:javascript
  new WOW().init();
%script{:charset => "utf-8", :src => expand_link('js/blueocean-landing-script.js')}
